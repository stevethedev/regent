/**
 * @author Steven Jimenez <steven@stevethedev.com>
 */
'use strict';

const RequestResponse          = require('regent-js/lib/core/request-response');
const { $private, $protected } = require('regent-js/lib/util/scope').create();

/**
 * This class provides a standardized interface for how Regent will interact
 * with Node's standard {@link https://nodejs.org/api/http.html|HTTP Request}
 * that was generated by the {@link HttpKernel}.
 */
class HttpRequest extends RequestResponse {
    /**
     * @param {HttpKernel}           httpKernel  - The owning HTTP Kernel
     *                                             object where this class is
     *                                             being instantiated.
     * @param {http.IncomingMessage} httpRequest - The internal NodeJS HTTP
     *                                             Request that this object
     *                                             wraps.
     */
    constructor(httpKernel, httpRequest) {
        super(httpKernel.getRegent());

        $private.set(this, {
            /**
             * Reference to the owning HTTP kernel object which generated
             * this instance.
             *
             * @private
             * @type {HttpKernel}
             */
            httpKernel,

            /**
             * Reference to the internal NodeJS HTTP Request that this wraps.
             *
             * @private
             * @type {http.IncomingMessage}
             */
            httpRequest,
        });

        $protected(this).cookies.parse(this.getHeader('cookie') || '');
    }

    /**
     * Retrieve the HTTP Method that triggered this request object.
     *
     * @return {String}
     */
    getMethod() {
        return $private(this).httpRequest.method;
    }

    /**
     * Retrieve the HTTP Header from the request object.
     *
     * @param {String} name
     *
     * @return {String}
     */
    getHeader(name) {
        const headers = $private(this).httpRequest.headers || {};
        if (Object.prototype.hasOwnProperty.call(headers, name)) {
            return headers[name];
        }
        return null;
    }

    /**
     * Retrieve the URI that triggered this request object, excluding the
     * scheme, host, and port.
     *
     * @return {String}
     */
    getUri() {
        const { httpRequest } = $private(this);
        if (!httpRequest || !httpRequest.url) {
            return '';
        }
        return httpRequest.url;
    }
}

module.exports = HttpRequest;
