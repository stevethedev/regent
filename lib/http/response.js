/**
 * @author Steven Jimenez <steven@stevethedev.com>
 */
'use strict';

const RegentObject = requireLib('util/regent-object');

/**
 * This class is responsible for providing a standardized Regent interface for
 * manipulating an {@link https://nodejs.org/api/http.html|HTTP Response} 
 * that was generated by the {@link HttpKernel}.
 */
class Response extends RegentObject
{
    /**
     * @param {HttpKernel}          httpKernel
     * @param {http.ServerResponse} httpResponse
     */
    constructor(httpKernel, httpResponse)
    {
        super(httpKernel.getRegent());

        /**
         * @protected
         * @property {HttpKernel}
         */
        this.__httpKernel = httpKernel;

        /**
         * @protected
         * @property {http.ServerResponse}
         */
        this.__httpResponse = httpResponse;

        /**
         * This is the HTTP Status Code to be sent to the client.
         * 
         * @protected
         * @property {Number}
         */
        this.__httpStatusCode = 200;

        /**
         * This is the response body that will be sent back to the client.
         *
         * @protected
         * @property {String}
         */
        this.__responseBody = '';
    }

    /**
     * This function Sets a single header value on the pending HTTP response. 
     * If the header already exists, then the value will be replaced. If an 
     * array is provided for the second parameter, then multiple headers with 
     * the same name will be sent for each of the values. Attempting to set a 
     * header field name with invalid characters will result in a TypeError 
     * being thrown.
     * 
     * @param {String}          headerName
     * @param {String|String[]} headerValue
     *
     * @chainable
     */
    setHeader(headerName, headerValue)
    {
        this.__httpResponse.setHeader(headerName, headerValue);
        return this;
    }

    /**
     * This function is used to remove a header that's been queued for sending.
     *
     * @param {String} headerName
     *
     * @chainable
     */
    removeHeader(headerName)
    {
        this.__httpResponse.removeHeader(headerName);
        return this;
    }

    /**
     * This function is used to set a batch of headers on the pending HTTP
     * response at the same time.
     *
     * @param {Dictionary} headerDictionary
     *
     * @chainable
     */
    setHeaders(headerDictionary)
    {
        if (headerDictionary && 'object' == typeof this.__httpStatusCode) {
            Object.keys(headerDictionary).forEach(header => {
                this.setHeader(header, headerDictionary[header]);
            });
        }
        return this;
    }

    /**
     * This function is used to check whether a particular header has been
     * queued for sending to the client.
     *
     * @param {String} headerName
     *
     * @return {Boolean}
     */
    hasHeader(headerName)
    {
        return this.__httpResponse.hasHeader(headerName);
    }

    /**
     * This function is used to append a set of text values to the end of the
     * pending body content.
     *
     * @param {...String} content - The values to send to the client.
     *
     * @chainable
     */
    appendBody(...content)
    {
        this.__responseBody = this.__responseBody + content.join('');
        return this;
    }

    /**
     * This function is used to prepend a set of text values to the start of
     * the pending body content.
     *
     * @param {...String} content - The values to send to the client.
     *
     * @chainable
     */
    prependBody(...content)
    {
        this.__responseBody = content.join('') + this.__responseBody;
        return this;
    }

    /**
     * This function is used to overwrite the text content to be sent to
     * the client.
     *
     * @param {...String} content
     *
     * @chainable
     */
    setBody(...content)
    {
        this.__responseBody = '' + content.join('');
        return this;
    }

    /**
     * This function finalizes the HTTP response and sends it to the client.
     *
     * @param {Number} statusCode
     *
     * @return {Promise}
     */
    send(statusCode = this.__httpStatusCode)
    {
        const callback = (resolve, reject) => {
            this.__httpStatusCode = statusCode;
            this.__httpResponse.writeHead(statusCode);
            this.__httpResponse.end(this.__responseBody, (err) => {
                if (err) {
                    return reject(err);
                }
                return resolve();
            });
        };
        return new Promise(callback);
    }
}

module.exports = Response;
